package br.com.danilopaixao.projetoteste;
import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertNotNull;import static org.junit.Assert.assertNull;import static org.mockito.Matchers.anyLong;import static org.mockito.Mockito.when;
import java.util.ArrayList;import java.util.List;
import org.junit.Before;import org.junit.Test;import org.junit.runner.RunWith;import org.mockito.InjectMocks;import org.mockito.Mock;import org.mockito.MockitoAnnotations;import org.mockito.internal.util.reflection.Whitebox;import org.mockito.runners.MockitoJUnitRunner;
import br.com.danilopaixao.projetoteste.MenssageValidation;import br.com.danilopaixao.projetoteste.StatusEnrollment;import br.com.danilopaixao.projetoteste.StatusRequirement;import br.com.danilopaixao.projetoteste.CancelEnrollmentVO;import br.com.danilopaixao.projetoteste.ValidationErrorVO;import br.com.danilopaixao.projetoteste.EnrollmentEAOBean;import br.com.danilopaixao.projetoteste.RequirementEnrollmentEAOBean;import br.com.danilopaixao.projetoteste.RequirementTransactionEAOBean;import br.com.danilopaixao.projetoteste.RequirementPO;import br.com.danilopaixao.projetoteste.RequirementTransactionPO;import br.com.danilopaixao.projetoteste.EnrollmentOnlineBO;
@RunWith(MockitoJUnitRunner.class)public class EnrollmentTest {
    @InjectMocks    private EnrollmentOnlineBO enrollmentOnlineBO;
    private CancelEnrollmentVO cancellEnrollmentVO;
    @Mock    private RequirementEnrollmentEAOBean requirementEnrollmentEAOBean;
    @Mock    private EnrollmentEAOBean enrollmentEAOBean;
    @Mock    private RequirementTransactionEAOBean requirementTransactionEAOBean;
    @Before    public void initTestCase(){        MockitoAnnotations.initMocks(this);        cancellEnrollmentVO = new CancelEnrollmentVO();    }
    @Test    public void testCancellStatus(){        RequirementPO requirementPO = new RequirementPO();        requirementPO.setIdStatus(StatusRequirement.CANCELLED.getId());        when(requirementEnrollmentEAOBean.getById(anyLong())).thenReturn(requirementPO);  Long requirementNumber = 9L;        String mensagemErro = MenssageValidation.REQUISICAO_CANCELLED.getMsg();        ValidationErrorVO result = enrollmentOnlineBO.verifyRequirementError(requirementNumber);  // enrollmentOnlineBO has requirementEnrollmentEAOBean attribute  // enrollmentOnlineBO.verifyRequirementError call requirementEnrollmentEAOBean.getById method
        assertEquals(mensagemErro, result.getMensagemErro());    }
 @Test    public void testBlockedStatus(){        RequirementPO requirementPO = new RequirementPO();        requirementPO.setIdStatus(StatusRequirement.BLOCKED.getId());        when(requirementEnrollmentEAOBean.getById(anyLong())).thenReturn(requirementPO);        Long requirementNumber = 9L;        String mensagemErro = MenssageValidation.REQUISICAO_CANCELLED.getMsg();        ValidationErrorVO result = enrollmentOnlineBO.verifyRequirementError(requirementNumber);        assertEquals(mensagemErro, result.getMensagemErro());    }
    @Test    public void testRequirementTransactionErrorEmpty(){        Long requirementNumber = 10L;        List<RequirementTransactionPO> listRequirementTransactionPO = new ArrayList<RequirementTransactionPO>();        Whitebox.setInternalState(enrollmentOnlineBO, "requirementTransactionEAO", requirementTransactionEAOBean);        when(requirementTransactionEAOBean.getTransactionByRequirementNumber(requirementNumber)).thenReturn(listRequirementTransactionPO);        ValidationErrorVO result = enrollmentOnlineBO.verifyRequirementTransactionError(requirementNumber);        assertNull(result);
    }
    @Test    public void testRequirementTransactionError(){        Long requirementNumber = 10L;        List<RequirementTransactionPO> listRequirementTransactionPO = new ArrayList<RequirementTransactionPO>();        listRequirementTransactionPO.add(new RequirementTransactionPO());        listRequirementTransactionPO.add(new RequirementTransactionPO());        Whitebox.setInternalState(enrollmentOnlineBO, "requirementTransactionEAO", requirementTransactionEAOBean);        when(requirementTransactionEAOBean.getTransactionByRequirementNumber(requirementNumber)).thenReturn(listRequirementTransactionPO);        ValidationErrorVO result = enrollmentOnlineBO.verifyRequirementTransactionError(requirementNumber);        assertNotNull(result);
    }
}
